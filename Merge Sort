#include <time.h>
#include <stdio.h>
#include <stdlib.h>

void OrdemCrescente(int v[], int n){
    int i;
    for(i = 0; i < n; i++)
        v[i] = i;
}

void OrdemDecrescente(int v[], int n){
    int i;
    for(i = 0; i < n; i++)
        v[i] = n-i;
}

void Aleatoriamente(int v[], int n){
    int i;
    for(i = 0; i < n; i++)
        v[i] = rand();
}

void merge(int vec[], int vecSize) {
    int mid;
    int i, j, k;
    int* tmp;
    tmp = (int*) malloc(vecSize * sizeof(int));
    if (tmp == NULL) {
        exit(1);
    }
    mid = vecSize / 2;
    i = 0;
    j = mid;
    k = 0;
    while (i < mid && j < vecSize) {
        if (vec[i] < vec[j]) {
          tmp[k] = vec[i];
          ++i;
        }
        else {
          tmp[k] = vec[j];
          ++j;
        }
        ++k;
    }
    if (i == mid) {
        while (j < vecSize) {
          tmp[k] = vec[j];
          ++j;
          ++k;
        }
    }
    else {
        while (i < mid) {
          tmp[k] = vec[i];
          ++i;
          ++k;
        }
    }
    for (i = 0; i < vecSize; ++i) {
        vec[i] = tmp[i];
    }
    free(tmp);
}



void mergeSort(int vec[], int vecSize) {
    int mid;

    if (vecSize > 1) {
        mid = vecSize / 2;
        mergeSort(vec, mid);
        mergeSort(vec + mid, vecSize - mid);
        merge(vec, vecSize);
    }
}


int main(){

    srand(time(NULL)); // gera valores completamente aleatorios em cada execucao do programa
    int N = 100000, i;
    int v[N];
    //retire o comentario da opção que deseja testar
       //Aleatoriamente(v, N);
       //OrdemDecrescente(v, N);
      OrdemCrescente(v,N);

    double start, stop, elapsed; // variaveis para medir o tempo

    start = (double) clock() / CLOCKS_PER_SEC;

	mergeSort(v, N);

    stop = (double) clock() / CLOCKS_PER_SEC;
    elapsed = stop - start;
    printf("Tempo total em segundos: %f\n", elapsed);

   /* printf("\nSaída: \n");
  for(i=0;i<N;i++){
      printf("%d ", v[i]);
  }
*/

    return 0;
}
